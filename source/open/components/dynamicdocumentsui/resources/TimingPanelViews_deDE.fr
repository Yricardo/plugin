//========================================================================================
//  
//  $File: //depot/devtech/nevis/plugin/source/open/components/dynamicdocumentsui/resources/TimingPanelViews_deDE.fr $
//  
//  Owner: Michael Burbidge
//  
//  $Author: devtecbj $
//  
//  $DateTime: 2015/03/13 15:57:09 $
//  
//  $Revision: #2 $
//  
//  $Change: 905372 $
//  
//  Copyright 1997-2008 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

#include "IconStyleDefs.h"
#include "InterfaceColorDefines.h"
#include "TreeViewDefs.h"

#ifdef __ODFRC__

resource TimingPanelWidget (kTimingPaletteRsrcID + index_deDE)
{
	__FILE__, __LINE__,
	kTimingPanelWidgetID, kPMRsrcID_None,	// WidgetId, RsrcId
	kBindNone,								// Frame binding
	Frame(0, 0, kMinTimingPanelWidth, kMinTimingPanelHeight),// Frame
	kTrue, kTrue,							// Visible, Enabled
	kTrue,									// EraseBeforeDrawing
	kInterfacePaletteFill,					// Erase to color
	"kTimingPanelName",						// Panel name
	{
		// Event 
		GenericPanelWidget
		(
			kTimingPanelEventGroupWidgetID, kPMRsrcID_None,
			kBindLeft | kBindRight | kBindTop,
			Frame(0,5,kMinTimingPanelWidth,25)		// Frame
			kTrue, kTrue,
			""
			{
				StaticTextWidget
				(
					kTimingPanelEventStaticWidgetID, kSysStaticTextPMRsrcId,		// WidgetId, RsrcId
					kBindLeft | kBindTop,								// Frame binding
					Frame(0,0,66,20)						// Frame
					kTrue, kTrue, kAlignRight,				// Visible, Enabled
					kDontEllipsize, kTrue,					// Ellipsize style, Convert ampersands
					"kTimingPanelEventStaticText",			// Text
					kTimingPanelEventDropDownWidgetID,
				),
				DropDownListWidget
				(
					kTimingPanelEventDropDownWidgetID,    // WidgetId
					kSysDropDownPMRsrcId,				// RsrcId
					kBindLeft | kBindRight,
					Frame(66,0,202,20)					 // Frame
					kTrue, kTrue,
					{{
						// Fill in dynamically
					}}
				),
			}
		)
		// Delay
		GenericPanelWidget
		(
			kTimingPanelDelayGroupWidgetID, kPMRsrcID_None,
			kBindLeft | kBindTop,
			Frame(0,30,207,55)		// Frame
			kTrue, kTrue,
			""
			{
				StaticTextWidget
				(
					kTimingPanelDelayStaticWidgetID, kSysStaticTextPMRsrcId,		// WidgetId, RsrcId
					kBindLeft,								// Frame binding
					Frame(0,5,66,25)						// Frame
					kTrue, kTrue, kAlignRight,				// Visible, Enabled
					kDontEllipsize, kTrue,					// Ellipsize style, Convert ampersands
					"kTimingPanelDelayStaticText",			// Text
					kTimingDelayILEWidgetID,				// Associate widget ID
				),
				// delay slider widget
#if 1
                NudgeControlWidget 
                ( 
                    kTimingDelayNudgeWidgetID, kPMRsrcID_None,		// WidgetId, RsrcId 
                    kBindLeft,										// Frame binding 
					Frame(66,7,81,23), 								// Frame  
                    kTrue, kTrue,									// Visible, Enabled 
                ),
                RealEditBoxWidget
				(
					kTimingDelayILEWidgetID, kSysEditBoxPMRsrcId, 
					kBindLeft,
					Frame(81,7,116,23), 							// Frame  
					kTrue, kTrue,									// Visible, Enabled			
					kTimingDelayNudgeWidgetID,						// widget id of nudge button			
					0.25,	1.0,									// small/large nudge amount
					8,												// max num chars( 0 = no limit)
					kFalse,											// is read only
					kFalse,											//Notified for every key stroke
					kTrue,											// range checking enabled
					kFalse,											// blank entry allowed
					60.0, 0,										// upper/lower bounds
					"",												// initial text
				),
#else
				SliderILEWidget 
				( 
					kTimingDelayILEWidgetID, kPMRsrcID_None,        // WidgetId, RsrcId 
					kBindLeft,										// Frame binding 
					Frame(81,5,116,23), 								// Frame  
					kTrue, kTrue,									// Visible, Enabled 
					kAlignCenter, kDontEllipsize, kTrue, 			// Alignment, Ellipsize style, Convert ampersands 
					"1",											// Initial text 
					kSliderWidget,									// InLineEditWidgetType(kEditBox, kDropDown, kComboBox, kSliderWidget)
					kTrue, kTrue,									// key focus, editable 
					8,												// max num chars allowed,
					0,30,1,0.2,2,									// count control data(min/max/value/increment/incrementMultiple)
					0,60,1,0.2,5,									// count control data(min/max/value/increment/incrementMultiple)
					0												// no increment/decrement		
				),
#endif
				StaticTextWidget
				(
					kTimingPanelDelaySecondStaticWidgetID, kSysStaticTextPMRsrcId,		// WidgetId, RsrcId
					kBindLeft,								// Frame binding
					Frame(119,5,207,25)						// Frame
					kTrue, kTrue, kAlignLeft,				// Visible, Enabled
					kDontEllipsize, kTrue,					// Ellipsize style, Convert ampersands
					"kTimingPanelDelaySecondStaticText",    // Text
					kTimingDelayILEWidgetID,										// Associate widget ID
				),
			}
		)
						
		StaticTextWidget
		(
			kTimingPanelLinkedItemStaticWidgetID, kSysStaticTextPMRsrcId,		// WidgetId, RsrcId
			kBindLeft,								// Frame binding
			Frame(5,55,202,75)						// Frame
			kTrue, kTrue, kAlignLeft,				// Visible, Enabled
			kDontEllipsize, kTrue,					// Ellipsize style, Convert ampersands
			"kTimingPanelLinkedItemStaticText",			// Text
			kTimingDelayILEWidgetID,				// Associate widget ID
		),
		
		// Loop group
		GenericPanelWidget
		(
			kTimingPanelNumPlaysGroupWidgetID, kPMRsrcID_None,
			kBindLeft | kBindTop,
			Frame(0,75,kMinTimingPanelWidth,95)		// Frame
			kTrue, kTrue,
			""
			{
				StaticTextWidget
				(
					kTimingPanelPlayLinkedItemStaticWidgetID, kSysStaticTextPMRsrcId,		// WidgetId, RsrcId
					kBindLeft,								// Frame binding
					Frame(0,0,66,20)						// Frame
					kTrue, kTrue, kAlignRight,				// Visible, Enabled
					kDontEllipsize, kTrue,					// Ellipsize style, Convert ampersands
					"kTimingPanelPlayLinkedItemStaticText",	// Text
					kTimingPanelPlayLinkedItemEditBoxWidgetID,				// Associate widget ID
				),
				// delay slider widget
                NudgeControlWidget 
                ( 
                    kTimingPanelPlayLinkedItemNudgeWidgetID, kPMRsrcID_None,		// WidgetId, RsrcId 
                    kBindLeft,										// Frame binding 
					Frame(66,1,81,17), 								// Frame  
                    kTrue, kTrue,									// Visible, Enabled 
                ),
                IntEditBoxWidget
				(
					kTimingPanelPlayLinkedItemEditBoxWidgetID, kSysEditBoxPMRsrcId, 
					kBindLeft,
					Frame(81,1,116,17), 							// Frame  
					kTrue, kTrue,									// Visible, Enabled			
					kTimingPanelPlayLinkedItemNudgeWidgetID,				// widget id of nudge button			
					1,	5,											// small/large nudge amount
					8,												// max num chars( 0 = no limit)
					kFalse,											// is read only
					kFalse,											//Notified for every key stroke
					kTrue,											// range checking enabled
					kFalse,											// blank entry allowed
					99, 1,											// upper/lower bounds
					"",												// initial text
				),
				StaticTextWidget
				(
					kTimingPanelPlayLinkedItemTimeStaticWidgetID, kSysStaticTextPMRsrcId,		// WidgetId, RsrcId
					kBindLeft,								// Frame binding
					Frame(119,0,144,20)					// Frame
					kTrue, kTrue, kAlignLeft,				// Visible, Enabled
					kDontEllipsize, kTrue,					// Ellipsize style, Convert ampersands
					"kTimingPanelPlayLinkedItemTimeStaticText",  // Text
					kTimingPanelPlayLinkedItemEditBoxWidgetID,										// Associate widget ID
				),
			}
		)
		CheckBoxWidget	// loop checkbox
		(     
			kTimingPanelLoopCheckBoxWidgetID,			// WidgetId 
			kSysCheckBoxPMRsrcId,						// RsrcId 
			kBindNone,									// Frame binding 
			Frame(146,77,206,92)		// Frame 
			kTrue,										// Visible 
			kFalse,										// Enabled 
			kAlignLeft,									// Alignment 
			"kTimingPanelLoopCheckBoxLabel",		// Initial text 
		),
		GenericPanelWithBorderWidget
		(
			kTimingPanelTreeBorderPanelWidgetID, kPMRsrcID_None,			// WidgetId, RsrcId
			kBindAll,				// Frame binding
			Frame(5, 95, 202, 197)		// Frame
			kTrue, kTrue,										// Visible, Enabled
			""
			{
				TimingPanelTreeWidget
				(
					kTimingPanelTreeWidgetID, kPMRsrcID_None,// WidgetId, RsrcId
					kBindAll,
					Frame(1, 2, 196, 101)		// Frame
					kTrue, kTrue,				// Visible, Enabled
					kFalse,						// EraseBeforeDraw
					kInterfacePaletteFill,		// InterfaceColor
					"",// name
					kHideRootNode | kDrawEndLine, //Options
					kFalse,						//Use H Scroll bar
					kTrue,						//Use V scroll bar
					kTimingPanelRowHeight,		// Vertical Scroll Button Increment
					kTimingPanelRowHeight,		// Vertical Thumb Scroll Increment
					0,							// Horizontal Scroll Button Increment - Not Used
					0,							// Horizontal Thumb Scroll Increment - Not Used
					2,							// Items selectable, 0 = No Selection, 1 = Single Selection, 2 = Multiple Selection
					kTrue,						// Allow children from multiple parents to be selected
					kTrue,						// Allow discontiguous selection
					{
					},
				),
			}
		),
		
		// ----- Timing panel control strip (link/unlink icons) -----
		GenericPanelWidget
		(
			kTimingPanelControlStripWidgetID, kPMRsrcID_None,	// WidgetId, RsrcId
			kBindBottom | kBindRight | kBindLeft,				// Frame binding
			Frame(0,200,207,218)								// Frame
			kTrue, kTrue,										// Visible, Enabled
			""
			{
				TimingPanelPreviewButton
				(
					kTimingPanelPreviewButtonWidgetID, kTimingPanelShowPreviewIconRsrcID, kDynamicDocumentsUIPluginID,	// WidgetId, RsrcId
					kBindBottom | kBindLeft,											// Frame binding
					Frame(2,0,2 + kPanelIconWidth,kPanelIconHeight)													// Frame
					kTrue, kTrue,														// Visible, Enabled
					kADBEIconSuiteButtonType,
				),
	 			TimingPanelGroupButton
				(
					kTimingPanelGroupButtonWidgetID, kTimingPanelPlayTogetherIconRsrcID, kDynamicDocumentsUIPluginID,	// WidgetId, RsrcId
					kBindBottom | kBindRight,							// Frame binding
					Frame(190 - 2 * kPanelIconWidth,0,190 - kPanelIconWidth,kPanelIconHeight)		// Frame
					kTrue, kTrue,										// Visible, Enabled
					kADBEIconSuiteButtonType,
				),
				TimingPanelUngroupButton
				(
					kTimingPanelUngroupButtonWidgetID, kTimingPanelPlaySeparatelyIconRsrcID, kDynamicDocumentsUIPluginID,// WidgetId, RsrcId
					kBindBottom | kBindRight,							// Frame binding
					Frame(192 - kPanelIconWidth,0,192,kPanelIconHeight)		// Frame
					kTrue, kTrue,										// Visible, Enabled
					kADBEIconSuiteButtonType,
				),
			}
		),
	
	},
	"kTimingPanelPopup",			// Popup menu name	
}

resource TimingPanelTreeNode (kTimingPanelTreeNodeRsrcID + index_deDE)
{
	__FILE__, __LINE__,
	kTimingPanelElementWidgetID, kPMRsrcID_None,	// WidgetId, RsrcId
	kBindLeft | kBindRight,							// Frame binding
	Frame(1, 0, 196, kTimingPanelRowHeight),		// Frame
	kTrue, kTrue,									// Visible, Enabled
	"",												// Panel name
	{
		TimingPanelTreeNodeGroupWidget
		(
			kTimingPanelTreeNodeGroupWidgetID, kPMRsrcID_None,	// WidgetId, RsrcId 
			kBindLeft,											// Frame binding 
            Frame(0,0,kTimingPanelGroupWidgetWidth,kTimingPanelRowHeight)					// Frame 
            kTrue, kTrue,                                       // Visible, Enabled 
		),
		TimingPanelPageItemName
		(
			kTimingItemElementItemNameWidgetID, kSysStaticTextPMRsrcId,		// WidgetId, RsrcId
			kBindAll,								// Frame binding
			Frame(18,1,196,kTimingPanelRowHeight-2)	// Frame
			kTrue, kTrue, kAlignLeft,							// Visible, Enabled
			kEllipsizeMiddle, kTrue,										// Ellipsize style, Convert ampersands
			"",								// Initial text
			kEditbox,
			kFalse, kTrue,					// key focus, editable
			100								// max num chars allowed
		),
	}
}

#endif
